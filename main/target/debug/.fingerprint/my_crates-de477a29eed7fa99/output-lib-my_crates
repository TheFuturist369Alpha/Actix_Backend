{"$message_type":"diagnostic","message":"set `DATABASE_URL` to use query macros online, or run `cargo sqlx prepare` to update the query cache","code":null,"level":"error","spans":[{"file_name":"C:\\Users\\David Elvis\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sqlx-0.7.4\\src\\macros\\mod.rs","byte_start":15874,"byte_end":15925,"line_start":321,"line_end":321,"column_start":9,"column_end":60,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":9,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\David Elvis\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sqlx-0.7.4\\src\\macros\\mod.rs","byte_start":15874,"byte_end":15925,"line_start":321,"line_end":321,"column_start":9,"column_end":60,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":9,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\My RW Applications\\rust\\Actix_Demo\\my_crates\\src\\handlers.rs","byte_start":649,"byte_end":684,"line_start":30,"line_end":30,"column_start":8,"column_end":43,"is_primary":false,"text":[{"text":" match sqlx::query!(\"SELECT * FROM users\").fetch_all(&pool).await? {","highlight_start":8,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"C:\\Users\\David Elvis\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sqlx-0.7.4\\src\\macros\\mod.rs","byte_start":15748,"byte_end":15766,"line_start":318,"line_end":318,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"C:\\Users\\David Elvis\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sqlx-macros-0.7.4\\src\\lib.rs","byte_start":89,"byte_end":143,"line_start":8,"line_end":8,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: set `DATABASE_URL` to use query macros online, or run `cargo sqlx prepare` to update the query cache\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\My RW Applications\\rust\\Actix_Demo\\my_crates\\src\\handlers.rs:30:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m match sqlx::query!(\"SELECT * FROM users\").fetch_all(&pool).await? {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` which comes from the expansion of the macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `App`, `HttpServer`, and `post`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"C:\\My RW Applications\\rust\\Actix_Demo\\my_crates\\src\\handlers.rs","byte_start":21,"byte_end":25,"line_start":1,"line_end":1,"column_start":22,"column_end":26,"is_primary":true,"text":[{"text":"use actix_web::{get, post, web::{self, Data, Path}, App, HttpResponse, HttpServer, Responder};","highlight_start":22,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\My RW Applications\\rust\\Actix_Demo\\my_crates\\src\\handlers.rs","byte_start":52,"byte_end":55,"line_start":1,"line_end":1,"column_start":53,"column_end":56,"is_primary":true,"text":[{"text":"use actix_web::{get, post, web::{self, Data, Path}, App, HttpResponse, HttpServer, Responder};","highlight_start":53,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\My RW Applications\\rust\\Actix_Demo\\my_crates\\src\\handlers.rs","byte_start":71,"byte_end":81,"line_start":1,"line_end":1,"column_start":72,"column_end":82,"is_primary":true,"text":[{"text":"use actix_web::{get, post, web::{self, Data, Path}, App, HttpResponse, HttpServer, Responder};","highlight_start":72,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"C:\\My RW Applications\\rust\\Actix_Demo\\my_crates\\src\\handlers.rs","byte_start":19,"byte_end":25,"line_start":1,"line_end":1,"column_start":20,"column_end":26,"is_primary":true,"text":[{"text":"use actix_web::{get, post, web::{self, Data, Path}, App, HttpResponse, HttpServer, Responder};","highlight_start":20,"highlight_end":26}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\My RW Applications\\rust\\Actix_Demo\\my_crates\\src\\handlers.rs","byte_start":50,"byte_end":55,"line_start":1,"line_end":1,"column_start":51,"column_end":56,"is_primary":true,"text":[{"text":"use actix_web::{get, post, web::{self, Data, Path}, App, HttpResponse, HttpServer, Responder};","highlight_start":51,"highlight_end":56}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\My RW Applications\\rust\\Actix_Demo\\my_crates\\src\\handlers.rs","byte_start":69,"byte_end":81,"line_start":1,"line_end":1,"column_start":70,"column_end":82,"is_primary":true,"text":[{"text":"use actix_web::{get, post, web::{self, Data, Path}, App, HttpResponse, HttpServer, Responder};","highlight_start":70,"highlight_end":82}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused imports: `App`, `HttpServer`, and `post`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\My RW Applications\\rust\\Actix_Demo\\my_crates\\src\\handlers.rs:1:22\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse actix_web::{get, post, web::{self, Data, Path}, App, HttpResponse, HttpServer, Responder};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `PgPool`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"C:\\My RW Applications\\rust\\Actix_Demo\\my_crates\\src\\handlers.rs","byte_start":130,"byte_end":136,"line_start":3,"line_end":3,"column_start":12,"column_end":18,"is_primary":true,"text":[{"text":"use sqlx::{PgPool, Pool, Postgres};","highlight_start":12,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"C:\\My RW Applications\\rust\\Actix_Demo\\my_crates\\src\\handlers.rs","byte_start":130,"byte_end":138,"line_start":3,"line_end":3,"column_start":12,"column_end":20,"is_primary":true,"text":[{"text":"use sqlx::{PgPool, Pool, Postgres};","highlight_start":12,"highlight_end":20}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `PgPool`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\My RW Applications\\rust\\Actix_Demo\\my_crates\\src\\handlers.rs:3:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse sqlx::{PgPool, Pool, Postgres};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `FromResidual`)","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"C:\\My RW Applications\\rust\\Actix_Demo\\my_crates\\src\\handlers.rs","byte_start":707,"byte_end":708,"line_start":30,"line_end":30,"column_start":66,"column_end":67,"is_primary":true,"text":[{"text":" match sqlx::query!(\"SELECT * FROM users\").fetch_all(&pool).await? {","highlight_start":66,"highlight_end":67}],"label":"cannot use the `?` operator in an async function that returns `HttpResponse`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\My RW Applications\\rust\\Actix_Demo\\my_crates\\src\\handlers.rs","byte_start":707,"byte_end":708,"line_start":30,"line_end":30,"column_start":66,"column_end":67,"is_primary":false,"text":[{"text":" match sqlx::query!(\"SELECT * FROM users\").fetch_all(&pool).await? {","highlight_start":66,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"C:\\My RW Applications\\rust\\Actix_Demo\\my_crates\\src\\lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"C:\\My RW Applications\\rust\\Actix_Demo\\my_crates\\src\\handlers.rs","byte_start":639,"byte_end":946,"line_start":29,"line_end":37,"column_start":65,"column_end":2,"is_primary":false,"text":[{"text":"async fn cool(pool: Data<Arc<Pool<Postgres>>>) -> impl Responder{","highlight_start":65,"highlight_end":66},{"text":" match sqlx::query!(\"SELECT * FROM users\").fetch_all(&pool).await? {","highlight_start":1,"highlight_end":69},{"text":"    Ok(_) => HttpResponse::Ok().body(\"Database connction cool\"),","highlight_start":1,"highlight_end":65},{"text":"    Err(e) => {","highlight_start":1,"highlight_end":16},{"text":"        eprintln!(\"Database health check failed: {:?}\", e); ","highlight_start":1,"highlight_end":61},{"text":"     HttpResponse::InternalServerError().body(\"Database connection unhealthy.\")","highlight_start":1,"highlight_end":80},{"text":" }","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"this function should return `Result` or `Option` to accept `?`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `FromResidual`)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\My RW Applications\\rust\\Actix_Demo\\my_crates\\src\\handlers.rs:30:66\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0masync fn cool(pool: Data<Arc<Pool<Postgres>>>) -> impl Responder{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m _________________________________________________________________-\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m match sqlx::query!(\"SELECT * FROM users\").fetch_all(&pool).await? {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot use the `?` operator in an async function that returns `HttpResponse`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(_) => HttpResponse::Ok().body(\"Database connction cool\"),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Err(e) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis function should return `Result` or `Option` to accept `?`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors; 2 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 2 previous errors; 2 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
